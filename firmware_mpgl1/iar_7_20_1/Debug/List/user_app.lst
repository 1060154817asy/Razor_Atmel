###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        04/Mar/2016  23:40:58
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpg_common\application\user_app.c
#    Command line =  
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpg_common\application\user_app.c
#        -D MPGL1 -D MPG1 --preprocess=cl
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\ -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\bsp\ -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\CMSIS\Include\"
#    List file    =  
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     61          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Protected functions                                                                                                */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          /*--------------------------------------------------------------------------------------------------------------------
     78          Function: UserAppInitialize
     79          
     80          Description:
     81          Initializes the State Machine and its variables.
     82          
     83          Requires:
     84            -
     85          
     86          Promises:
     87            - 
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void UserAppInitialize(void)
     90          {
     91            HEARTBEAT_OFF();
   \                     UserAppInitialize: (+1)
   \   00000000   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   00000004   0x....             LDR.N    R1,??DataTable2  ;; 0x400e0c30
   \   00000006   0x6008             STR      R0,[R1, #+0]
     92            
     93            /* If good initialization, set state to Idle */
     94            if( 1 )
     95            {
     96              UserApp_StateMachine = UserAppSM_Idle;
   \   00000008   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   0000000C   0x....             LDR.N    R1,??DataTable2_1
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     97            }
     98            else
     99            {
    100              /* The task isn't properly initialized, so shut it down and don't run */
    101              UserApp_StateMachine = UserAppSM_FailedInit;
    102            }
    103          
    104          } /* end UserAppInitialize() */
   \   00000010   0x4770             BX       LR               ;; return
    105          
    106          
    107          /*----------------------------------------------------------------------------------------------------------------------
    108          Function UserAppRunActiveState()
    109          
    110          Description:
    111          Selects and runs one iteration of the current state in the state machine.
    112          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    113          may take 1ms / n to execute.
    114          
    115          Requires:
    116            - State machine function pointer points at current state
    117          
    118          Promises:
    119            - Calls the function to pointed by the state machine function pointer
    120          */

   \                                 In section .text, align 2, keep-with-next
    121          void UserAppRunActiveState(void)
    122          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    123            UserApp_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable2_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    124          
    125          } /* end UserAppRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    126          
    127          
    128          /*--------------------------------------------------------------------------------------------------------------------*/
    129          /* Private functions                                                                                                  */
    130          /*--------------------------------------------------------------------------------------------------------------------*/
    131          
    132          
    133          /**********************************************************************************************************************
    134          State Machine Function Definitions
    135          **********************************************************************************************************************/
    136          
    137          /*-------------------------------------------------------------------------------------------------------------------*/
    138          /* Wait for something to happen */

   \                                 In section .text, align 4, keep-with-next
    139          static void UserAppSM_Idle(void)
    140          {
    141            static u32 u32Counter = 0;
    142            static bool bLightIsOn = FALSE;
    143            
    144            /* Increment u32Counter every 1ms cycle */
    145            u32Counter++;
   \                     UserAppSM_Idle: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_2
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable2_2
   \   00000008   0x6008             STR      R0,[R1, #+0]
    146            
    147            /* Check and roll over */
    148            if(u32Counter == COUNTER_LIMIT_MS)
   \   0000000A   0x....             LDR.N    R0,??DataTable2_2
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF5B0 0x7FFA      CMP      R0,#+500
   \   00000012   0xD11A             BNE.N    ??UserAppSM_Idle_0
    149            {
    150              u32Counter = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable2_2
   \   00000018   0x6008             STR      R0,[R1, #+0]
    151              
    152              if(bLightIsOn)
   \   0000001A   0x....             LDR.N    R0,??DataTable2_3
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD004             BEQ.N    ??UserAppSM_Idle_1
    153              {
    154                HEARTBEAT_OFF();
   \   00000022   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   00000026   0x....             LDR.N    R1,??DataTable2  ;; 0x400e0c30
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0xE003             B.N      ??UserAppSM_Idle_2
    155              }
    156              else
    157              {
    158                HEARTBEAT_ON();
   \                     ??UserAppSM_Idle_1: (+1)
   \   0000002C   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   00000030   0x....             LDR.N    R1,??DataTable2_4  ;; 0x400e0c34
   \   00000032   0x6008             STR      R0,[R1, #+0]
    159              }
    160              bLightIsOn = !bLightIsOn;
                                ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??UserAppSM_Idle_2: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable2_3
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD103             BNE.N    ??UserAppSM_Idle_3
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable2_3
   \   00000040   0x7008             STRB     R0,[R1, #+0]
   \   00000042   0xE002             B.N      ??UserAppSM_Idle_0
   \                     ??UserAppSM_Idle_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable2_3
   \   00000048   0x7008             STRB     R0,[R1, #+0]
    161            }
    162            
    163          } /* end UserAppSM_Idle() */
   \                     ??UserAppSM_Idle_0: (+1)
   \   0000004A   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??u32Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     ??bLightIsOn:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x400E0C30         DC32     0x400e0c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ??u32Counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ??bLightIsOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x400E0C34         DC32     0x400e0c34
    164               
    165          
    166          /*-------------------------------------------------------------------------------------------------------------------*/
    167          /* Handle an error */
    168          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpg_common\application\user_app.c",61  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    169          {
    170            
    171          } /* end UserAppSM_Error() */
    172          
    173          
    174          /*-------------------------------------------------------------------------------------------------------------------*/
    175          /* State to sit in if init failed */
    176          static void UserAppSM_FailedInit(void)          
    177          {
    178              
    179          } /* end UserAppSM_FailedInit() */
    180          
    181          
    182          /*--------------------------------------------------------------------------------------------------------------------*/
    183          /* End of File                                                                                                        */
    184          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   UserAppInitialize
       8   UserAppRunActiveState
         8   -- Indirect call
       0   UserAppSM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  G_u32UserAppFlags
      18  UserAppInitialize
      10  UserAppRunActiveState
      76  UserAppSM_Idle
       4  UserApp_StateMachine
       1  bLightIsOn
       4  u32Counter

 
  13 bytes in section .bss
 124 bytes in section .text
 
 124 bytes of CODE memory
  13 bytes of DATA memory

Errors: none
Warnings: 3
