###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        26/Oct/2015  20:55:36
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c
#    Command line =  
#        "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c"
#        --preprocess=cl "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\" -lC
#        "D:\MPG Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\"
#        -o "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR
#        Systems\EWARM_7_20_1\arm\INC\c\DLib_Config_Normal.h" -I "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\" -I "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\bsp\" -I "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\drivers\" -I
#        "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\application\" -I
#        "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\"
#        -I "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\"
#        -I "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\"
#        -I "D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\"
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR
#        Systems\EWARM_7_20_1\arm\CMSIS\Include\"
#    List file    =  
#        D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\interrupts.lst
#    Object file  =  
#        D:\MPG
#        Source\Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\interrupts.o
#
###############################################################################

D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c
      1          /**********************************************************************************************************************
      2          File: interrupts.c                                                               
      3          
      4          Description:
      5          Interrupt definitions for use with LED sign controller firmware.
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */
     15          
     16          
     17          /*--------------------------------------------------------------------------------------------------------------------*/
     18          /* Existing variables (defined in other files -- should all contain the "extern" keyword)  */
     19          extern volatile u32 G_u32SystemTime1ms;                            /* From board-specific source file */
     20          extern volatile u32 G_u32SystemTime1s;                             /* From board-specific source file */
     21          
     22          extern volatile u32 G_u32SystemFlags;                              /* From main.c       */
     23          
     24          
     25          /***********************************************************************************************************************
     26          Global variable definitions with scope limited to this local application.
     27          Variables names shall start with "ISR_" and be declared as static.
     28          ***********************************************************************************************************************/
     29          
     30          
     31          /**********************************************************************************************************************
     32          Interrupt Service Routine Definitions
     33          ***********************************************************************************************************************/
     34          
     35          /*----------------------------------------------------------------------------------------------------------------------
     36          Function: InterruptSetup
     37          
     38          Description:
     39          Sets up interrupt priorities in the NVIC and enables required interrupts.
     40          Note that other interrupt sources may be enabled outside of this function.
     41          
     42          Requires:
     43            - All peripherals for which interrupts are enabled here should be configured
     44          
     45          Promises:
     46            - Interrupt priorities are set 
     47          */
     48          void InterruptSetup(void)
     49          {
     50            u32 au32PriorityConfig[PRIORITY_REGISTERS] = {IPR0_INIT, IPR1_INIT, IPR2_INIT, IPR3_INIT, IPR4_INIT,
                                          ^
Error[Pe020]: identifier "PRIORITY_REGISTERS" is undefined

    u32 au32PriorityConfig[PRIORITY_REGISTERS] = {IPR0_INIT, IPR1_INIT, IPR2_INIT, IPR3_INIT, IPR4_INIT,
                                                  ^
"D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c",50  Error[Pe020]: 
          identifier "IPR0_INIT" is undefined

    u32 au32PriorityConfig[PRIORITY_REGISTERS] = {IPR0_INIT, IPR1_INIT, IPR2_INIT, IPR3_INIT, IPR4_INIT,
                                                             ^
"D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c",50  Error[Pe020]: 
          identifier "IPR1_INIT" is undefined

    u32 au32PriorityConfig[PRIORITY_REGISTERS] = {IPR0_INIT, IPR1_INIT, IPR2_INIT, IPR3_INIT, IPR4_INIT,
                                                                        ^
"D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c",50  Error[Pe020]: 
          identifier "IPR2_INIT" is undefined

    u32 au32PriorityConfig[PRIORITY_REGISTERS] = {IPR0_INIT, IPR1_INIT, IPR2_INIT, IPR3_INIT, IPR4_INIT,
                                                                                   ^
"D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c",50  Error[Pe020]: 
          identifier "IPR3_INIT" is undefined

    u32 au32PriorityConfig[PRIORITY_REGISTERS] = {IPR0_INIT, IPR1_INIT, IPR2_INIT, IPR3_INIT, IPR4_INIT,
                                                                                              ^
"D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c",50  Error[Pe020]: 
          identifier "IPR4_INIT" is undefined
     51                                                          IPR5_INIT, IPR6_INIT, IPR7_INIT};
                                                                 ^
Error[Pe020]: identifier "IPR5_INIT" is undefined

                                                  IPR5_INIT, IPR6_INIT, IPR7_INIT};
                                                             ^
"D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c",51  Error[Pe020]: 
          identifier "IPR6_INIT" is undefined

                                                  IPR5_INIT, IPR6_INIT, IPR7_INIT};
                                                                        ^
"D:\MPG Source\Git\Razor_Atmel\firmware_mpg_common\drivers\interrupts.c",51  Error[Pe020]: 
          identifier "IPR7_INIT" is undefined
     52            
     53            /* Set interrupt priorities */
     54            for(u8 i = 0; i < PRIORITY_REGISTERS; i++)
     55            {
     56              ((u32*)(AT91C_BASE_NVIC->NVIC_IPR))[i] = au32PriorityConfig[i];
     57            }
     58            
     59            /* Disable all interrupts and ensure pending bits are clear */
     60            for(u8 i = 0; i < SAM3U2_INTERRUPT_SOURCES; i++)
     61            {
     62              NVIC_DisableIRQ( (IRQn_Type)i );
     63              NVIC_ClearPendingIRQ( (IRQn_Type) i);
     64            } 
     65              
     66          } /* end InterruptSetup(void) */
     67          
     68          
     69          /*----------------------------------------------------------------------------------------------------------------------
     70          ISR: HardFault_Handler
     71          
     72          Description:
     73          A non-maskable (always available) core interrupt that occurs when something extraordinary
     74          event.  In many cases, this is referencing an invalid address, but can be other events
     75          of various levels of mystery.  
     76          
     77          Requires:
     78            -
     79          
     80          Promises:
     81            - Red LED is on, all others off
     82            - Code held
     83          */
     84          void HardFault_Handler(void)
     85          {
     86            while(1);  /* !!!!! update to log and/or report error and/or restart */
     87            
     88          } /* end HardFault_Handler() */
     89          
     90          
     91          /*----------------------------------------------------------------------------------------------------------------------
     92          ISR: SysTick_Handler
     93          
     94          Description:
     95          Updates the global ms timer.  This interrupt is always enabled and running in 
     96          the system and is essential for system timing and sleep wakeup.
     97          This ISR should be as fast as possible!
     98          
     99          Requires:
    100          
    101          Promises:
    102            - G_u32SystemTime1ms counter is incremented by 1
    103            - System tick interrupt pending flag is cleared
    104          */
    105          void SysTick_Handler(void)
    106          {
    107            static u16 u16SecondCounter = 1000;
    108            
    109            /* Update the 1ms system timer and clear sleep flag */
    110            G_u32SystemTime1ms++;
    111            G_u32SystemFlags &= ~_SYSTEM_SLEEPING;
                                        ^
Error[Pe020]: identifier "_SYSTEM_SLEEPING" is undefined
    112          
    113            /* Update the 1 second timer if required */
    114            if(--u16SecondCounter == 0)
    115            {
    116              u16SecondCounter = 1000;
    117              G_u32SystemTime1s++;
    118            }
    119              
    120          } /* end SysTickHandler(void) */
    121          
    122          
    123          /*--------------------------------------------------------------------------------------------------------------------*/
    124          /* End of File */
    125          /*--------------------------------------------------------------------------------------------------------------------*/

Errors: 10
Warnings: none
