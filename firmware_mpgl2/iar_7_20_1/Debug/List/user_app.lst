###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        04/Mar/2016  10:09:18
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpg_common\application\user_app.c
#    Command line =  
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpg_common\application\user_app.c
#        -D MPGL2 -D MPG2 --preprocess=cl
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\Debug\List\
#        -lC
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\Debug\List\
#        -o
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\ -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\..\bsp\ -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\..\drivers\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\..\application\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\..\libraries\captouch\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\CMSIS\Include\"
#    List file    =  
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpgl2\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     61          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Protected functions                                                                                                */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          /*--------------------------------------------------------------------------------------------------------------------
     78          Function: UserAppInitialize
     79          
     80          Description:
     81          Initializes the State Machine and its variables.
     82          
     83          Requires:
     84            -
     85          
     86          Promises:
     87            - 
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void UserAppInitialize(void)
     90          {
   \                     UserAppInitialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     91          #ifdef MPGL1
     92            /* All discrete LEDs to off */
     93            LedOff(WHITE);
     94            LedOff(PURPLE);
     95            LedOff(BLUE);
     96            LedOff(CYAN);
     97            LedOff(GREEN);
     98            LedOff(YELLOW);
     99            LedOff(ORANGE);
    100            LedOff(RED);
    101            
    102            /* Backlight to white */  
    103            LedOn(LCD_RED);
    104            LedOn(LCD_GREEN);
    105            LedOn(LCD_BLUE);
    106          #endif /* MPGL1 */
    107          
    108          #ifdef MPGL2
    109            /* All discrete LEDs to off */
    110            LedOff(RED0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       LedOff
    111            LedOff(RED1);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       LedOff
    112            LedOff(RED2);
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x.... 0x....      BL       LedOff
    113            LedOff(RED3);
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      BL       LedOff
    114            LedOff(GREEN0);
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x.... 0x....      BL       LedOff
    115            LedOff(GREEN1);
   \   00000020   0x2005             MOVS     R0,#+5
   \   00000022   0x.... 0x....      BL       LedOff
    116            LedOff(GREEN2);
   \   00000026   0x2006             MOVS     R0,#+6
   \   00000028   0x.... 0x....      BL       LedOff
    117            LedOff(GREEN3);
   \   0000002C   0x2007             MOVS     R0,#+7
   \   0000002E   0x.... 0x....      BL       LedOff
    118            LedOff(BLUE0);
   \   00000032   0x2008             MOVS     R0,#+8
   \   00000034   0x.... 0x....      BL       LedOff
    119            LedOff(BLUE1);
   \   00000038   0x2009             MOVS     R0,#+9
   \   0000003A   0x.... 0x....      BL       LedOff
    120            LedOff(BLUE2);
   \   0000003E   0x200A             MOVS     R0,#+10
   \   00000040   0x.... 0x....      BL       LedOff
    121            LedOff(BLUE3);
   \   00000044   0x200B             MOVS     R0,#+11
   \   00000046   0x.... 0x....      BL       LedOff
    122            
    123            /* Backlight to white */  
    124            LedOn(LCD_BL);
   \   0000004A   0x200C             MOVS     R0,#+12
   \   0000004C   0x.... 0x....      BL       LedOn
    125          #endif /* MPGL2 */
    126            
    127            /* If good initialization, set state to Idle */
    128            if( 1 /* Add condition for good init */)
    129            {
    130              UserApp_StateMachine = UserAppSM_Idle;
   \   00000050   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   00000054   0x....             LDR.N    R1,??DataTable2
   \   00000056   0x6008             STR      R0,[R1, #+0]
    131            }
    132            else
    133            {
    134              /* The task isn't properly initialized, so shut it down and don't run */
    135              UserApp_StateMachine = UserAppSM_FailedInit;
    136            }
    137          
    138          } /* end UserAppInitialize() */
   \   00000058   0xBD01             POP      {R0,PC}          ;; return
    139          
    140          
    141          /*----------------------------------------------------------------------------------------------------------------------
    142          Function UserAppRunActiveState()
    143          
    144          Description:
    145          Selects and runs one iteration of the current state in the state machine.
    146          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    147          may take 1ms / n to execute.
    148          
    149          Requires:
    150            - State machine function pointer points at current state
    151          
    152          Promises:
    153            - Calls the function to pointed by the state machine function pointer
    154          */

   \                                 In section .text, align 2, keep-with-next
    155          void UserAppRunActiveState(void)
    156          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    157            UserApp_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    158          
    159          } /* end UserAppRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    160          
    161          
    162          /*--------------------------------------------------------------------------------------------------------------------*/
    163          /* Private functions                                                                                                  */
    164          /*--------------------------------------------------------------------------------------------------------------------*/
    165          
    166          
    167          /**********************************************************************************************************************
    168          State Machine Function Definitions
    169          **********************************************************************************************************************/
    170          
    171          /*-------------------------------------------------------------------------------------------------------------------*/
    172          /* Update counter and display on LEDs. */

   \                                 In section .text, align 4, keep-with-next
    173          static void UserAppSM_Idle(void)
    174          {
   \                     UserAppSM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    175            static u16 u16BlinkCount = 0;
    176            static u8 u8Counter = 0;
    177            static u8 u8ColorIndex = 0;
    178            
    179          #ifdef MPG1
    180            u16BlinkCount++;
    181            if(u16BlinkCount == 500)
    182            {
    183              u16BlinkCount = 0;
    184              
    185              /* Update the counter and roll at 16 */
    186              u8Counter++;
    187              if(u8Counter == 16)
    188              {
    189                u8Counter = 0;
    190                
    191                /* Manage the backlight color */
    192                u8ColorIndex++;
    193                if(u8ColorIndex == 7)
    194                {
    195                  u8ColorIndex = 0;
    196                }
    197                
    198              /* Parse the current count to set the LEDs.  RED is bit 0, ORANGE is bit 1,
    199              YELLOW is bit 2, GREEN is bit 3. */
    200              
    201              if(u8Counter & 0x01)
    202              {
    203                LedOn(RED);
    204              }
    205              else
    206              {
    207                LedOff(RED);
    208              }
    209          
    210              if(u8Counter & 0x02)
    211              {
    212                LedOn(ORANGE);
    213              }
    214              else
    215              {
    216                LedOff(ORANGE);
    217              }
    218          
    219              if(u8Counter & 0x04)
    220              {
    221                LedOn(YELLOW);
    222              }
    223              else
    224              {
    225                LedOff(YELLOW);
    226              }
    227          
    228              if(u8Counter & 0x08)
    229              {
    230                LedOn(GREEN);
    231              }
    232              else
    233              {
    234                LedOff(GREEN);
    235              }
    236          
    237                /* Set the backlight color: white (all), purple (blue + red), blue, cyan (blue + green),
    238                green, yellow (green + red), red */
    239                switch(u8ColorIndex)
    240                {
    241                  case 0: /* white */
    242                    LedOn(LCD_RED);
    243                    LedOn(LCD_GREEN);
    244                    LedOn(LCD_BLUE);
    245                    break;
    246          
    247                  case 1: /* purple */
    248                    LedOn(LCD_RED);
    249                    LedOff(LCD_GREEN);
    250                    LedOn(LCD_BLUE);
    251                    break;
    252                    
    253                  case 2: /* blue */
    254                    LedOff(LCD_RED);
    255                    LedOff(LCD_GREEN);
    256                    LedOn(LCD_BLUE);
    257                    break;
    258                    
    259                  case 3: /* cyan */
    260                    LedOff(LCD_RED);
    261                    LedOn(LCD_GREEN);
    262                    LedOn(LCD_BLUE);
    263                    break;
    264                    
    265                  case 4: /* green */
    266                    LedOff(LCD_RED);
    267                    LedOn(LCD_GREEN);
    268                    LedOff(LCD_BLUE);
    269                    break;
    270                    
    271                  case 5: /* yellow */
    272                    LedOn(LCD_RED);
    273                    LedOn(LCD_GREEN);
    274                    LedOff(LCD_BLUE);
    275                    break;
    276                    
    277                  case 6: /* red */
    278                    LedOn(LCD_RED);
    279                    LedOff(LCD_GREEN);
    280                    LedOff(LCD_BLUE);
    281                    break;
    282                    
    283                  default: /* off */
    284                    LedOff(LCD_RED);
    285                    LedOff(LCD_GREEN);
    286                    LedOff(LCD_BLUE);
    287                    break;
    288                } /* end switch */
    289              } /* end if(u8Counter == 16) */
    290              
    291            } /* end if(u16BlinkCount == 500) */
    292          #endif /* MPGL1 */
    293          
    294          #ifdef MPG2
    295            u16BlinkCount++;
   \   00000002   0x....             LDR.N    R0,??DataTable2_1
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable2_1
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    296            if(u16BlinkCount == 500)
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0xF5B0 0x7FFA      CMP      R0,#+500
   \   00000014   0xF040 0x8083      BNE.W    ??UserAppSM_Idle_0
    297            {
    298              u16BlinkCount = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable2_1
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
    299              
    300              /* Update the counter and roll at 16 */
    301              u8Counter++;
   \   0000001E   0x....             LDR.N    R0,??DataTable2_2
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable2_2
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    302              if(u8Counter == 16)
   \   00000028   0x....             LDR.N    R0,??DataTable2_2
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2810             CMP      R0,#+16
   \   0000002E   0xD12A             BNE.N    ??UserAppSM_Idle_1
    303              {
    304                u8Counter = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable2_2
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    305                
    306                LedOff((LedNumberType)(RED3 + (4 * u8ColorIndex)));
   \   00000036   0x....             LDR.N    R0,??DataTable2_3
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x0080             LSLS     R0,R0,#+2
   \   0000003C   0x1CC0             ADDS     R0,R0,#+3
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x.... 0x....      BL       LedOff
    307                LedOff((LedNumberType)(RED2 + (4 * u8ColorIndex)));
   \   00000044   0x....             LDR.N    R0,??DataTable2_3
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x0080             LSLS     R0,R0,#+2
   \   0000004A   0x1C80             ADDS     R0,R0,#+2
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x.... 0x....      BL       LedOff
    308                LedOff((LedNumberType)(RED1 + (4 * u8ColorIndex)));
   \   00000052   0x....             LDR.N    R0,??DataTable2_3
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x0080             LSLS     R0,R0,#+2
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x.... 0x....      BL       LedOff
    309                LedOff((LedNumberType)(RED0 + (4 * u8ColorIndex)));
   \   00000060   0x....             LDR.N    R0,??DataTable2_3
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x0080             LSLS     R0,R0,#+2
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x.... 0x....      BL       LedOff
    310                
    311                u8ColorIndex++;
   \   0000006E   0x....             LDR.N    R0,??DataTable2_3
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \   00000074   0x....             LDR.N    R1,??DataTable2_3
   \   00000076   0x7008             STRB     R0,[R1, #+0]
    312                if(u8ColorIndex == 3)
   \   00000078   0x....             LDR.N    R0,??DataTable2_3
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x2803             CMP      R0,#+3
   \   0000007E   0xD102             BNE.N    ??UserAppSM_Idle_1
    313                {
    314                  u8ColorIndex = 0;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x....             LDR.N    R1,??DataTable2_3
   \   00000084   0x7008             STRB     R0,[R1, #+0]
    315                }
    316              } /* end if(u8Counter == 16) */
    317              
    318              /* Parse the current count to set the LEDs.  From leds.h we see the enum for red, green and blue
    319              are seperated by 4 so use this with u8ColorIndex to */
    320              
    321              if(u8Counter & 0x01)
   \                     ??UserAppSM_Idle_1: (+1)
   \   00000086   0x....             LDR.N    R0,??DataTable2_2
   \   00000088   0x7800             LDRB     R0,[R0, #+0]
   \   0000008A   0x07C0             LSLS     R0,R0,#+31
   \   0000008C   0xD507             BPL.N    ??UserAppSM_Idle_2
    322              {
    323                LedOn((LedNumberType)(RED3 + (4 * u8ColorIndex)));
   \   0000008E   0x....             LDR.N    R0,??DataTable2_3
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x0080             LSLS     R0,R0,#+2
   \   00000094   0x1CC0             ADDS     R0,R0,#+3
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0x.... 0x....      BL       LedOn
   \   0000009C   0xE006             B.N      ??UserAppSM_Idle_3
    324              }
    325              else
    326              {
    327                LedOff(RED3 + (4 * u8ColorIndex));
                              ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??UserAppSM_Idle_2: (+1)
   \   0000009E   0x....             LDR.N    R0,??DataTable2_3
   \   000000A0   0x7800             LDRB     R0,[R0, #+0]
   \   000000A2   0x0080             LSLS     R0,R0,#+2
   \   000000A4   0x1CC0             ADDS     R0,R0,#+3
   \   000000A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A8   0x.... 0x....      BL       LedOff
    328              }
    329          
    330              if(u8Counter & 0x02)
   \                     ??UserAppSM_Idle_3: (+1)
   \   000000AC   0x....             LDR.N    R0,??DataTable2_2
   \   000000AE   0x7800             LDRB     R0,[R0, #+0]
   \   000000B0   0x0780             LSLS     R0,R0,#+30
   \   000000B2   0xD507             BPL.N    ??UserAppSM_Idle_4
    331              {
    332                LedOn(RED2 + (4 * u8ColorIndex));
                             ^
Warning[Pe188]: enumerated type mixed with another type
   \   000000B4   0x....             LDR.N    R0,??DataTable2_3
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0x0080             LSLS     R0,R0,#+2
   \   000000BA   0x1C80             ADDS     R0,R0,#+2
   \   000000BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BE   0x.... 0x....      BL       LedOn
   \   000000C2   0xE006             B.N      ??UserAppSM_Idle_5
    333              }
    334              else
    335              {
    336                LedOff(RED2 + (4 * u8ColorIndex));
                              ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??UserAppSM_Idle_4: (+1)
   \   000000C4   0x....             LDR.N    R0,??DataTable2_3
   \   000000C6   0x7800             LDRB     R0,[R0, #+0]
   \   000000C8   0x0080             LSLS     R0,R0,#+2
   \   000000CA   0x1C80             ADDS     R0,R0,#+2
   \   000000CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CE   0x.... 0x....      BL       LedOff
    337              }
    338          
    339              if(u8Counter & 0x04)
   \                     ??UserAppSM_Idle_5: (+1)
   \   000000D2   0x....             LDR.N    R0,??DataTable2_2
   \   000000D4   0x7800             LDRB     R0,[R0, #+0]
   \   000000D6   0x0740             LSLS     R0,R0,#+29
   \   000000D8   0xD507             BPL.N    ??UserAppSM_Idle_6
    340              {
    341                LedOn(RED1 + (4 * u8ColorIndex));
                             ^
Warning[Pe188]: enumerated type mixed with another type
   \   000000DA   0x....             LDR.N    R0,??DataTable2_3
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x0080             LSLS     R0,R0,#+2
   \   000000E0   0x1C40             ADDS     R0,R0,#+1
   \   000000E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E4   0x.... 0x....      BL       LedOn
   \   000000E8   0xE006             B.N      ??UserAppSM_Idle_7
    342              }
    343              else
    344              {
    345                LedOff(RED1 + (4 * u8ColorIndex));
                              ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??UserAppSM_Idle_6: (+1)
   \   000000EA   0x....             LDR.N    R0,??DataTable2_3
   \   000000EC   0x7800             LDRB     R0,[R0, #+0]
   \   000000EE   0x0080             LSLS     R0,R0,#+2
   \   000000F0   0x1C40             ADDS     R0,R0,#+1
   \   000000F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F4   0x.... 0x....      BL       LedOff
    346              }
    347          
    348              if(u8Counter & 0x08)
   \                     ??UserAppSM_Idle_7: (+1)
   \   000000F8   0x....             LDR.N    R0,??DataTable2_2
   \   000000FA   0x7800             LDRB     R0,[R0, #+0]
   \   000000FC   0x0700             LSLS     R0,R0,#+28
   \   000000FE   0xD507             BPL.N    ??UserAppSM_Idle_8
    349              {
    350                LedOn(RED0 + (4 * u8ColorIndex));
                             ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000100   0x....             LDR.N    R0,??DataTable2_3
   \   00000102   0x7800             LDRB     R0,[R0, #+0]
   \   00000104   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000106   0x0080             LSLS     R0,R0,#+2
   \   00000108   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010A   0x.... 0x....      BL       LedOn
   \   0000010E   0xE006             B.N      ??UserAppSM_Idle_0
    351              }
    352              else
    353              {
    354                LedOff(RED0 + (4 * u8ColorIndex));
                              ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??UserAppSM_Idle_8: (+1)
   \   00000110   0x....             LDR.N    R0,??DataTable2_3
   \   00000112   0x7800             LDRB     R0,[R0, #+0]
   \   00000114   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000116   0x0080             LSLS     R0,R0,#+2
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x.... 0x....      BL       LedOff
    355              }
    356              
    357            } /* end if(u16BlinkCount == 500) */
    358          #endif /* MPG2 */  
    359            
    360          } /* end UserAppSM_Idle() */
   \                     ??UserAppSM_Idle_0: (+1)
   \   0000011E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??u16BlinkCount:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??u8Counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8ColorIndex:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ??u16BlinkCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ??u8Counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ??u8ColorIndex
    361          
    362          
    363          /*-------------------------------------------------------------------------------------------------------------------*/
    364          /* Handle an error */
    365          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"D:\MPG\mpg_source\Git\Razor_Atmel\firmware_mpg_common\application\user_app.c",61  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    366          {
    367            UserApp_StateMachine = UserAppSM_Idle;
    368            
    369          } /* end UserAppSM_Error() */
    370          
    371          
    372          /*-------------------------------------------------------------------------------------------------------------------*/
    373          /* State to sit in if init failed */
    374          static void UserAppSM_FailedInit(void)          
    375          {
    376              
    377          } /* end UserAppSM_FailedInit() */
    378          
    379          
    380          /*--------------------------------------------------------------------------------------------------------------------*/
    381          /* End of File                                                                                                        */
    382          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   UserAppInitialize
         8   -> LedOff
         8   -> LedOn
       8   UserAppRunActiveState
         8   -- Indirect call
       8   UserAppSM_Idle
         8   -> LedOff
         8   -> LedOn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  G_u32UserAppFlags
      90  UserAppInitialize
      10  UserAppRunActiveState
     288  UserAppSM_Idle
       4  UserApp_StateMachine
       2  u16BlinkCount
       1  u8ColorIndex
       1  u8Counter

 
  12 bytes in section .bss
 404 bytes in section .text
 
 404 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: 9
