###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        20/Jun/2015  15:02:44
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\application\main.c
#    Command line =  
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\application\main.c
#        --preprocess=cl
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\ -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\application\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\libraries\captouch\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\List\main.lst
#    Object file  =  
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\Obj\main.o
#
###############################################################################

C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\application\main.c
      1          /***********************************************************************************************************************
      2          File: main.c                                                                
      3          
      4          Description:
      5          Container for the MPG firmware.  
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32SystemFlags = 0;                     /* Global system flags */
   \                     G_u32SystemFlags:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          volatile u32 G_u32ApplicationFlags = 0;                /* Global applications flags: set when application is successfully initialized. Bit defs in configuration.h */
   \                     G_u32ApplicationFlags:
   \   00000000                      DS8 4
     17          
     18          
     19          /*--------------------------------------------------------------------------------------------------------------------*/
     20          /* External global variables defined in other files (must indicate which file they are defined in) */
     21          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     22          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     23          
     24          
     25          /***********************************************************************************************************************
     26          Global variable definitions with scope limited to this local application.
     27          Variable names shall start with "Main_" and be declared as static.
     28          ***********************************************************************************************************************/
     29          
     30          
     31          /***********************************************************************************************************************
     32          Main Program
     33          Main has two sections:
     34          
     35          1. Initialization which is run once on power-up or reset.  All drivers and applications are setup here without timing
     36          contraints but must complete execution regardless of success or failure of starting the application. 
     37          
     38          2. Super loop which runs infinitely giving processor time to each application.  The total loop time should not exceed
     39          1ms of execution time counting all application execution.  SystemSleep() will execute to complete the remaining time in
     40          the 1ms period.
     41          
     42          ***********************************************************************************************************************/
     43          

   \                                 In section .text, align 4, keep-with-next
     44          void main(void)
     45          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     46            G_u32SystemFlags |= _SYSTEM_INITIALIZING;
   \   00000002   0x4827             LDR.N    R0,??main_0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   0000000A   0x4925             LDR.N    R1,??main_0
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     47            // Check for watch dog restarts
     48          
     49            /* Low level initialization */
     50            WatchDogSetup(); /* During development, set to not reset processor if timeout */
   \   0000000E   0x.... 0x....      BL       WatchDogSetup
     51            ClockSetup();
   \   00000012   0x.... 0x....      BL       ClockSetup
     52            GpioSetup();
   \   00000016   0x.... 0x....      BL       GpioSetup
     53            InterruptSetup();
   \   0000001A   0x.... 0x....      BL       InterruptSetup
     54            SysTickSetup();
   \   0000001E   0x.... 0x....      BL       SysTickSetup
     55          
     56            /* Driver initialization */
     57            MessagingInitialize();
   \   00000022   0x.... 0x....      BL       MessagingInitialize
     58            UartInitialize();
   \   00000026   0x.... 0x....      BL       UartInitialize
     59            DebugInitialize();
   \   0000002A   0x.... 0x....      BL       DebugInitialize
     60          
     61            /* Debug messages through DebugPrintf() are available from here */
     62          
     63            SspInitialize();
   \   0000002E   0x.... 0x....      BL       SspInitialize
     64            LcdInitialize();
   \   00000032   0x.... 0x....      BL       LcdInitialize
     65            LedInitialize();
   \   00000036   0x.... 0x....      BL       LedInitialize
     66            ButtonInitialize();
   \   0000003A   0x.... 0x....      BL       ButtonInitialize
     67             
     68            CapTouchInitialize();
   \   0000003E   0x.... 0x....      BL       CapTouchInitialize
     69            AntInitialize();
   \   00000042   0x.... 0x....      BL       AntInitialize
     70            
     71            /* Application initialization */
     72            //PongInitialize();
     73            BoardTestInitialize();
   \   00000046   0x.... 0x....      BL       BoardTestInitialize
     74            
     75            /* Exit initialization */
     76            SystemStatusReport();
   \   0000004A   0x.... 0x....      BL       SystemStatusReport
     77            G_u32SystemFlags &= ~_SYSTEM_INITIALIZING;
   \   0000004E   0x4814             LDR.N    R0,??main_0
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x0040             LSLS     R0,R0,#+1        ;; ZeroExtS R0,R0,#+1,#+1
   \   00000054   0x0840             LSRS     R0,R0,#+1
   \   00000056   0x4912             LDR.N    R1,??main_0
   \   00000058   0x6008             STR      R0,[R1, #+0]
     78            
     79          #if 0  /* LED Color Testing */
     80            LedPWM(BLUE0, LED_PWM_100);
     81            LedPWM(RED0, LED_PWM_100);
     82            LedPWM(GREEN0, LED_PWM_100);
     83            
     84            LedPWM(BLUE1, LED_PWM_100);
     85            LedPWM(RED1, LED_PWM_100);
     86            LedPWM(GREEN1, LED_PWM_100);
     87          
     88            LedPWM(BLUE2, LED_PWM_100);
     89            LedPWM(RED2, LED_PWM_100);
     90            LedPWM(GREEN2, LED_PWM_100);
     91          
     92            LedPWM(BLUE3, LED_PWM_80);
     93            LedPWM(RED3, LED_PWM_100);
     94            LedPWM(GREEN3, LED_PWM_100);
     95          #endif
     96          
     97          #if 0  /* LED Color Testing / screen display hold */
     98            LedOff(BLUE0);
     99            LedOff(RED0);
    100            LedOn(GREEN0);
    101            
    102            LedOn(BLUE1);
    103            LedOn(RED1);
    104            LedOff(GREEN1);
    105          
    106            LedOff(BLUE2);
    107            LedOn(RED2);
    108            LedOff(GREEN2);
    109          
    110            LedOn(BLUE3);
    111            LedOff(RED3);
    112            LedOff(GREEN3);
    113            //LedUpdate();
    114          
    115            while(1);
    116          #endif
    117          
    118            
    119            /* Super loop */  
    120            while(1)
    121            {
    122              WATCHDOG_BONE();
   \                     ??main_1: (+1)
   \   0000005A   0x4812             LDR.N    R0,??main_0+0x4  ;; 0xa5000001
   \   0000005C   0x4912             LDR.N    R1,??main_0+0x8  ;; 0x400e1250
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    123              
    124              /* Drivers */
    125              LedUpdate();
   \   00000060   0x.... 0x....      BL       LedUpdate
    126              ButtonRunActiveState();
   \   00000064   0x.... 0x....      BL       ButtonRunActiveState
    127              UartRunActiveState();
   \   00000068   0x.... 0x....      BL       UartRunActiveState
    128              SspRunActiveState();
   \   0000006C   0x.... 0x....      BL       SspRunActiveState
    129              //TWIRunActiveState();
    130              CapTouchRunActiveState(); /* This function violates 1ms loop timing every 25ms */ 
   \   00000070   0x.... 0x....      BL       CapTouchRunActiveState
    131              MessagingRunActiveState();
   \   00000074   0x.... 0x....      BL       MessagingRunActiveState
    132              DebugRunActiveState();
   \   00000078   0x.... 0x....      BL       DebugRunActiveState
    133              LcdRunActiveState();
   \   0000007C   0x.... 0x....      BL       LcdRunActiveState
    134              AntRunActiveState();
   \   00000080   0x.... 0x....      BL       AntRunActiveState
    135          
    136              /* Applications */
    137              //PongRunActiveState();
    138              BoardTestRunActiveState();
   \   00000084   0x.... 0x....      BL       BoardTestRunActiveState
    139                  
    140              /* System sleep*/
    141              HEARTBEAT_OFF();
   \   00000088   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   0000008C   0x4907             LDR.N    R1,??main_0+0xC  ;; 0x400e0c30
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    142              SystemSleep();
   \   00000090   0x.... 0x....      BL       SystemSleep
    143              HEARTBEAT_ON();
   \   00000094   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   00000098   0x4905             LDR.N    R1,??main_0+0x10  ;; 0x400e0c34
   \   0000009A   0x6008             STR      R0,[R1, #+0]
   \   0000009C   0xE7DD             B.N      ??main_1
   \   0000009E   0xBF00             Nop      
   \                     ??main_0:
   \   000000A0   0x........         DC32     G_u32SystemFlags
   \   000000A4   0xA5000001         DC32     0xa5000001
   \   000000A8   0x400E1250         DC32     0x400e1250
   \   000000AC   0x400E0C30         DC32     0x400e0c30
   \   000000B0   0x400E0C34         DC32     0x400e0c34
    144              
    145            } /* end while(1) main super loop */
    146            
    147          } /* end main() */
    148          
    149          
    150          /*--------------------------------------------------------------------------------------------------------------------*/
    151          /* End of File */
    152          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> AntInitialize
         8   -> AntRunActiveState
         8   -> BoardTestInitialize
         8   -> BoardTestRunActiveState
         8   -> ButtonInitialize
         8   -> ButtonRunActiveState
         8   -> CapTouchInitialize
         8   -> CapTouchRunActiveState
         8   -> ClockSetup
         8   -> DebugInitialize
         8   -> DebugRunActiveState
         8   -> GpioSetup
         8   -> InterruptSetup
         8   -> LcdInitialize
         8   -> LcdRunActiveState
         8   -> LedInitialize
         8   -> LedUpdate
         8   -> MessagingInitialize
         8   -> MessagingRunActiveState
         8   -> SspInitialize
         8   -> SspRunActiveState
         8   -> SysTickSetup
         8   -> SystemSleep
         8   -> SystemStatusReport
         8   -> UartInitialize
         8   -> UartRunActiveState
         8   -> WatchDogSetup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  G_u32ApplicationFlags
       4  G_u32SystemFlags
     180  main

 
   8 bytes in section .bss
 180 bytes in section .text
 
 180 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
