###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        20/Jun/2015  15:02:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\application\mpgl2_board_test.c
#    Command line =  
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\application\mpgl2_board_test.c
#        --preprocess=cl
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\ -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\application\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\libraries\captouch\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\List\mpgl2_board_test.lst
#    Object file  =  
#        C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\iar_7_20_1\Debug\Obj\mpgl2_board_test.o
#
###############################################################################

C:\Users\Vipin\Documents\GitHub\mpgl2\firmware_mpgl2\application\mpgl2_board_test.c
      1          /**********************************************************************************************************************
      2          File: mpgl2_board_test.c                                                                
      3          
      4          Description:
      5          Application to completely test the MPGL2 Atmel development board, mpgl2-ehdw-01.
      6          
      7          On startup:
      8          - Observe all 4 discrete PLCC LEDs white (D13, D14, D15, D16)
      9          - Observe all 4 discrete 0603 LEDs on ANT radio lit (D8 blue, D7 green, D6 yellow, D5 red)
     10          - Observe both power and J-Link status LEDs lit green (D3, D18)
     11          - Observe LCD backlight on
     12          - Observe buzzer sound
     13          - Observe RS-232 output of board startup sequence with 0 task init failures
     14          
     15          Device check:
     16            - Type R, G, B, to toggle red, green, blue elements in RGB LEDs
     17            - BUTTON0: Toggle LEDs off and LCD pixel test on (LCD backlight stays on, verify all pixels lit)
     18            - BUTTON1: Turn on ANT radio and buzzer using test receiver to verify broadcast messages at 4Hz, 
     19                       Frequency 50 (2.45GHz), Transmission type 55, Device ID 0xa5a5.
     20            - Captouch vertical slider slides on-screen logo up and down (serial output reports full range 0 to 255)
     21            - Captouch horizontal slider slides on-screen logo left and right (serial output reports full range 0 to 255)
     22          
     23          
     24          **********************************************************************************************************************/
     25          
     26          #include "configuration.h"
     27          
     28          /***********************************************************************************************************************
     29          Global variable definitions with scope across entire project.
     30          All Global variable names shall start with "G_BoardTest"
     31          ***********************************************************************************************************************/
     32          /* New variables */

   \                                 In section .bss, align 4
     33          volatile u32 G_u32BoardTestFlags;                      /* Global state flags */
   \                     G_u32BoardTestFlags:
   \   00000000                      DS8 4
     34          
     35          
     36          /*--------------------------------------------------------------------------------------------------------------------*/
     37          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     38          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     39          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     40          
     41          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     42          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     43          
     44          extern PixelBlockType G_sLcdClearWholeScreen;          /* From lcd_NHD-C12864LZ.c */
     45          extern const u8 aau8EngenuicsLogoBlack[LCD_IMAGE_ROW_SIZE_50PX][LCD_IMAGE_COL_BYTES_50PX];   /* From lcd_bitmaps.c */
     46          
     47          extern u8 G_au8MessageOK[];                           /* From utilities.c */
     48          extern u8 G_au8MessageFAIL[];                         /* From utilities.c */
     49          
     50          extern u32 G_u32AntFlags;                             /* From ant.c */
     51          extern AntSetupDataType G_stAntSetupData;             /* From ant.c */
     52          
     53          extern u32 G_u32AntApiCurrentDataTimeStamp;                      /* From ant_api.c */
     54          extern AntApplicationMessageType G_eAntApiCurrentMessageClass;   /* From ant_api.c */
     55          extern u8 G_au8AntApiCurrentData[ANT_APPLICATION_MESSAGE_BYTES]; /* From ant_api.c */
     56          
     57          
     58          /***********************************************************************************************************************
     59          Global variable definitions with scope limited to this local application.
     60          Variable names shall start with "BoardTest_" and be declared as static.
     61          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     62          static fnCode_type BoardTest_pfnStateMachine;          /* The state machine function pointer */
   \                     BoardTest_pfnStateMachine:
   \   00000000                      DS8 4
     63          

   \                                 In section .bss, align 4
     64          static PixelBlockType BoardTest_sTestLogoPixelBlock;   /* Bitmap parameters for logo */
   \                     BoardTest_sTestLogoPixelBlock:
   \   00000000                      DS8 8
     65          

   \                                 In section .bss, align 4
     66          static u32 BoardTest_u32Flags;                         /* Application status flags */
   \                     BoardTest_u32Flags:
   \   00000000                      DS8 4
     67          
     68          
     69          /***********************************************************************************************************************
     70          Function Definitions
     71          ***********************************************************************************************************************/
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Public functions                                                                                                   */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          
     78          /*--------------------------------------------------------------------------------------------------------------------*/
     79          /* Protected functions                                                                                                */
     80          /*--------------------------------------------------------------------------------------------------------------------*/
     81          
     82          /*----------------------------------------------------------------------------------------------------------------------
     83          Function: BoardTestInitialize
     84          
     85          Description:
     86          Initializes the State Machine and its variables.
     87          
     88          Requires:
     89            -
     90          
     91          Promises:
     92            - 
     93          */

   \                                 In section .text, align 2, keep-with-next
     94          void BoardTestInitialize(void)
     95          {
   \                     BoardTestInitialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     96            u8 au8BoardTestStartupMsg[] = "BoardTest task initialization ";
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000000A   0x221F             MOVS     R2,#+31
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy
     97          
     98            /* Clear flags */
     99            BoardTest_u32Flags = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000016   0x6008             STR      R0,[R1, #+0]
    100          
    101            /* Start with all LEDs on */
    102          #ifdef MPGL2_R01
    103            LedOn(BLUE);
    104            LedOn(GREEN);
    105            LedOn(RED);
    106            LedOn(YELLOW);
    107          
    108          #else
    109            LedOn(BLUE0);
   \   00000018   0x2008             MOVS     R0,#+8
   \   0000001A   0x.... 0x....      BL       LedOn
    110            LedOn(BLUE1);
   \   0000001E   0x2009             MOVS     R0,#+9
   \   00000020   0x.... 0x....      BL       LedOn
    111            LedOn(BLUE2);
   \   00000024   0x200A             MOVS     R0,#+10
   \   00000026   0x.... 0x....      BL       LedOn
    112            LedOn(BLUE3);
   \   0000002A   0x200B             MOVS     R0,#+11
   \   0000002C   0x.... 0x....      BL       LedOn
    113            LedOn(GREEN0);
   \   00000030   0x2004             MOVS     R0,#+4
   \   00000032   0x.... 0x....      BL       LedOn
    114            LedOn(GREEN1);
   \   00000036   0x2005             MOVS     R0,#+5
   \   00000038   0x.... 0x....      BL       LedOn
    115            LedOn(GREEN2);
   \   0000003C   0x2006             MOVS     R0,#+6
   \   0000003E   0x.... 0x....      BL       LedOn
    116            LedOn(GREEN3);
   \   00000042   0x2007             MOVS     R0,#+7
   \   00000044   0x.... 0x....      BL       LedOn
    117            LedOn(RED0);
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       LedOn
    118            LedOn(RED1);
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x.... 0x....      BL       LedOn
    119            LedOn(RED2);
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0x.... 0x....      BL       LedOn
    120            LedOn(RED3);
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x.... 0x....      BL       LedOn
    121          #endif /* MPGL2_R01 */
    122            
    123            /* Activate CapTouch sensor an initialize readings */
    124            CapTouchOn();
   \   00000060   0x.... 0x....      BL       CapTouchOn
    125            
    126            /* Draw the logo on screen */
    127            LcdClearPixels(&G_sLcdClearWholeScreen);
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000068   0x.... 0x....      BL       LcdClearPixels
    128          
    129            BoardTest_sTestLogoPixelBlock.u16RowSize = LCD_IMAGE_ROW_SIZE_50PX;
   \   0000006C   0x2032             MOVS     R0,#+50
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000072   0x8088             STRH     R0,[R1, #+4]
    130            BoardTest_sTestLogoPixelBlock.u16ColumnSize = LCD_IMAGE_COL_SIZE_50PX;
   \   00000074   0x2032             MOVS     R0,#+50
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   0000007A   0x80C8             STRH     R0,[R1, #+6]
    131            BoardTest_sTestLogoPixelBlock.u16RowStart = 7;
   \   0000007C   0x2007             MOVS     R0,#+7
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000082   0x8008             STRH     R0,[R1, #+0]
    132            BoardTest_sTestLogoPixelBlock.u16ColumnStart = 40;
   \   00000084   0x2028             MOVS     R0,#+40
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   0000008A   0x8048             STRH     R0,[R1, #+2]
    133            LcdLoadBitmap(&aau8EngenuicsLogoBlack[0][0], &BoardTest_sTestLogoPixelBlock);
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000094   0x.... 0x....      BL       LcdLoadBitmap
    134          
    135            /* Configure the ANT radio */
    136            G_stAntSetupData.AntChannel          = ANT_CHANNEL_BOARDTEST;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   0000009E   0x7008             STRB     R0,[R1, #+0]
    137            G_stAntSetupData.AntChannelType      = ANT_CHANNEL_TYPE_BOARDTEST;
   \   000000A0   0x2010             MOVS     R0,#+16
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000A6   0x7048             STRB     R0,[R1, #+1]
    138            G_stAntSetupData.AntNetwork          = ANT_NETWORK_BOARDTEST;
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000AE   0x7088             STRB     R0,[R1, #+2]
    139            G_stAntSetupData.AntSerialLo         = ANT_SERIAL_LO_BOARDTEST;
   \   000000B0   0x2034             MOVS     R0,#+52
   \   000000B2   0x....             LDR.N    R1,??DataTable5_5
   \   000000B4   0x70C8             STRB     R0,[R1, #+3]
    140            G_stAntSetupData.AntSerialHi         = ANT_SERIAL_HI_BOARDTEST;
   \   000000B6   0x2012             MOVS     R0,#+18
   \   000000B8   0x....             LDR.N    R1,??DataTable5_5
   \   000000BA   0x7108             STRB     R0,[R1, #+4]
    141            G_stAntSetupData.AntDeviceType       = ANT_DEVICE_TYPE_BOARDTEST;
   \   000000BC   0x2060             MOVS     R0,#+96
   \   000000BE   0x....             LDR.N    R1,??DataTable5_5
   \   000000C0   0x7148             STRB     R0,[R1, #+5]
    142            G_stAntSetupData.AntTransmissionType = ANT_TRANSMISSION_TYPE_BOARDTEST;
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0x....             LDR.N    R1,??DataTable5_5
   \   000000C6   0x7188             STRB     R0,[R1, #+6]
    143            G_stAntSetupData.AntChannelPeriodLo  = ANT_CHANNEL_PERIOD_LO_BOARDTEST;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x....             LDR.N    R1,??DataTable5_5
   \   000000CC   0x71C8             STRB     R0,[R1, #+7]
    144            G_stAntSetupData.AntChannelPeriodHi  = ANT_CHANNEL_PERIOD_HI_BOARDTEST;
   \   000000CE   0x2020             MOVS     R0,#+32
   \   000000D0   0x....             LDR.N    R1,??DataTable5_5
   \   000000D2   0x7208             STRB     R0,[R1, #+8]
    145            G_stAntSetupData.AntFrequency        = ANT_FREQUENCY_BOARDTEST;
   \   000000D4   0x2032             MOVS     R0,#+50
   \   000000D6   0x....             LDR.N    R1,??DataTable5_5
   \   000000D8   0x7248             STRB     R0,[R1, #+9]
    146            G_stAntSetupData.AntTxPower          = ANT_TX_POWER_BOARDTEST;
   \   000000DA   0x2003             MOVS     R0,#+3
   \   000000DC   0x....             LDR.N    R1,??DataTable5_5
   \   000000DE   0x7288             STRB     R0,[R1, #+10]
    147            
    148            AntChannelConfig(ANT_MASTER);
   \   000000E0   0x2001             MOVS     R0,#+1
   \   000000E2   0x.... 0x....      BL       AntChannelConfig
    149            
    150            /* Set the buzzer frequency so it is ready to be enabled but keep it off for now */
    151            PWMAudioSetFrequency(BUZZER0, 500);
   \   000000E6   0xF44F 0x71FA      MOV      R1,#+500
   \   000000EA   0x2001             MOVS     R0,#+1
   \   000000EC   0x.... 0x....      BL       PWMAudioSetFrequency
    152            PWMAudioOff(BUZZER0);
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       PWMAudioOff
    153          
    154            
    155            /* If good initialization, set flag and set state to Idle */
    156            DebugPrintf(au8BoardTestStartupMsg);
   \   000000F6   0xA800             ADD      R0,SP,#+0
   \   000000F8   0x.... 0x....      BL       DebugPrintf
    157            if( 1 /* Add condition for good init */)
    158            {
    159              G_u32ApplicationFlags |= _APPLICATION_FLAGS_BOARDTEST;
   \   000000FC   0x....             LDR.N    R0,??DataTable5_6
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000104   0x....             LDR.N    R1,??DataTable5_6
   \   00000106   0x6008             STR      R0,[R1, #+0]
    160              DebugPrintf(G_au8MessageOK);
   \   00000108   0x....             LDR.N    R0,??DataTable5_7
   \   0000010A   0x.... 0x....      BL       DebugPrintf
    161              BoardTest_pfnStateMachine = BoardTestSM_Idle;
   \   0000010E   0x.... 0x....      ADR.W    R0,BoardTestSM_Idle
   \   00000112   0x....             LDR.N    R1,??DataTable5_8
   \   00000114   0x6008             STR      R0,[R1, #+0]
    162            }
    163            else
    164            {
    165              /* The task isn't properly initialized, so shut it down and don't run */
    166              DebugPrintf(G_au8MessageFAIL);
    167              BoardTest_pfnStateMachine = BoardTestSM_FailedInit;
    168            }
    169          
    170          } /* end BoardTestInitialize() */
   \   00000116   0xB009             ADD      SP,SP,#+36
   \   00000118   0xBD00             POP      {PC}             ;; return
    171          
    172          
    173          /*----------------------------------------------------------------------------------------------------------------------
    174          Function BoardTestRunActiveState()
    175          
    176          Description:
    177          Selects and runs one iteration of the current state in the state machine.
    178          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    179          may take 1ms / n to execute.
    180          
    181          Requires:
    182            - State machine function pointer points at current state
    183          
    184          Promises:
    185            - Calls the function to pointed by the state machine function pointer
    186          */

   \                                 In section .text, align 2, keep-with-next
    187          void BoardTestRunActiveState(void)
    188          {
   \                     BoardTestRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    189            BoardTest_pfnStateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable5_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    190          
    191          } /* end BoardTestRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    192          
    193          
    194          /*--------------------------------------------------------------------------------------------------------------------*/
    195          /* Private functions                                                                                                  */
    196          /*--------------------------------------------------------------------------------------------------------------------*/
    197          /*----------------------------------------------------------------------------------------------------------------------
    198          Function: BoardTestUpdateLogoPosition
    199          
    200          Description:
    201          Reads the current captouch slider locations and translates that to the current location of the logo.
    202          
    203          Requires:
    204            - Logo size is 50x50
    205          
    206          Promises:
    207            - Horizontal reading 0 - 255 is translated to a range of 0 - 77 (valid for top left pixel location)
    208              and set to BoardTest_TestLogoPixelBlock.u16ColumnStart
    209            - Vertical reading 0 - 255 is translated to a range of 0 - 13 (valid for top left pixel location)
    210              and set to BoardTest_TestLogoPixelBlock.u16RowStart
    211          */

   \                                 In section .text, align 2, keep-with-next
    212          bool BoardTestUpdateLogoPosition(void)
    213          {
   \                     BoardTestUpdateLogoPosition: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    214            u8 u8Horizontal, u8Vertical;
    215            bool bNewPosition = FALSE;
   \   00000002   0x2400             MOVS     R4,#+0
    216            
    217            u8Horizontal = CaptouchCurrentHSlidePosition();
   \   00000004   0x.... 0x....      BL       CaptouchCurrentHSlidePosition
   \   00000008   0x0005             MOVS     R5,R0
    218            u8Vertical   = CaptouchCurrentVSlidePosition();
   \   0000000A   0x.... 0x....      BL       CaptouchCurrentVSlidePosition
   \   0000000E   0x0006             MOVS     R6,R0
    219            
    220            /* The horizontal calculation pads the top and bottom of the range with 0 and 78 */
    221            if(u8Horizontal < 14)
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x2D0E             CMP      R5,#+14
   \   00000014   0xDA02             BGE.N    ??BoardTestUpdateLogoPosition_0
    222            {
    223              u8Horizontal = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0005             MOVS     R5,R0
   \   0000001A   0xE00A             B.N      ??BoardTestUpdateLogoPosition_1
    224            }
    225            else if (u8Horizontal < 246)
   \                     ??BoardTestUpdateLogoPosition_0: (+1)
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2DF6             CMP      R5,#+246
   \   00000020   0xDA05             BGE.N    ??BoardTestUpdateLogoPosition_2
    226            {
    227              u8Horizontal = (u8Horizontal - 4) / 3;
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x1F28             SUBS     R0,R5,#+4
   \   00000026   0x2103             MOVS     R1,#+3
   \   00000028   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \   0000002C   0xE001             B.N      ??BoardTestUpdateLogoPosition_1
    228            }
    229            else
    230            {
    231              u8Horizontal = 78;
   \                     ??BoardTestUpdateLogoPosition_2: (+1)
   \   0000002E   0x204E             MOVS     R0,#+78
   \   00000030   0x0005             MOVS     R5,R0
    232            }
    233            
    234            /* The vertical position works out such that only a single calculation is required */
    235            u8Vertical = (u8Vertical + 5) / 18;
   \                     ??BoardTestUpdateLogoPosition_1: (+1)
   \   00000032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000034   0x1D70             ADDS     R0,R6,#+5
   \   00000036   0x2112             MOVS     R1,#+18
   \   00000038   0xFB90 0xF6F1      SDIV     R6,R0,R1
    236          
    237            /* Update positions if they have changed */
    238            if(BoardTest_sTestLogoPixelBlock.u16ColumnStart != u8Horizontal)
   \   0000003C   0x....             LDR.N    R0,??DataTable5_3
   \   0000003E   0x8840             LDRH     R0,[R0, #+2]
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000046   0x4288             CMP      R0,R1
   \   00000048   0xD004             BEQ.N    ??BoardTestUpdateLogoPosition_3
    239            {
    240              BoardTest_sTestLogoPixelBlock.u16ColumnStart = u8Horizontal;
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x....             LDR.N    R0,??DataTable5_3
   \   0000004E   0x8045             STRH     R5,[R0, #+2]
    241              bNewPosition = TRUE;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x0004             MOVS     R4,R0
    242            }
    243            
    244            if(  BoardTest_sTestLogoPixelBlock.u16RowStart != u8Vertical)
   \                     ??BoardTestUpdateLogoPosition_3: (+1)
   \   00000054   0x....             LDR.N    R0,??DataTable5_3
   \   00000056   0x8800             LDRH     R0,[R0, #+0]
   \   00000058   0x0031             MOVS     R1,R6
   \   0000005A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005E   0x4288             CMP      R0,R1
   \   00000060   0xD004             BEQ.N    ??BoardTestUpdateLogoPosition_4
    245            {
    246              BoardTest_sTestLogoPixelBlock.u16RowStart = u8Vertical;
   \   00000062   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000064   0x....             LDR.N    R0,??DataTable5_3
   \   00000066   0x8006             STRH     R6,[R0, #+0]
    247              bNewPosition = TRUE;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x0004             MOVS     R4,R0
    248            }
    249            
    250            return(bNewPosition);
   \                     ??BoardTestUpdateLogoPosition_4: (+1)
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0xBD70             POP      {R4-R6,PC}       ;; return
    251            
    252          } /* end BoardTestUpdateLogoPosition() */
    253          
    254          
    255          /***********************************************************************************************************************
    256          State Machine Function Definitions
    257          ***********************************************************************************************************************/
    258          
    259          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    260          static void BoardTestSM_Idle(void)
    261          {
   \                     BoardTestSM_Idle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
    262            static bool bButton0Test = FALSE;
    263            static u32 u32LogoUpdateTimer = 0;
    264            static u8 au8TestMessage[] = {0, 0, 0, 0, 0, 0, 0, 0};
    265            static u8 au8DataMessage[] = "ANT data: ";
    266            u8 au8DataContent[26];
    267            
    268            /* Update logo position if it's time */
    269            if( IsTimeUp(&u32LogoUpdateTimer, LOGO_UPDATE_PERIOD) )
   \   00000004   0x2164             MOVS     R1,#+100
   \   00000006   0x....             LDR.N    R0,??DataTable5_9
   \   00000008   0x.... 0x....      BL       IsTimeUp
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD00D             BEQ.N    ??BoardTestSM_Idle_0
    270            {
    271              u32LogoUpdateTimer = G_u32SystemTime1ms;
   \   00000010   0x....             LDR.N    R0,??DataTable5_10
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x....             LDR.N    R1,??DataTable5_9
   \   00000016   0x6008             STR      R0,[R1, #+0]
    272              
    273              /* Update new position -- returns TRUE if a new position is required */
    274              if( BoardTestUpdateLogoPosition() )
   \   00000018   0x.... 0x....      BL       BoardTestUpdateLogoPosition
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD005             BEQ.N    ??BoardTestSM_Idle_0
    275              {
    276                /* Clear screen and update with latest logo position */
    277                LcdClearScreen();
   \   00000020   0x.... 0x....      BL       LcdClearScreen
    278                LcdLoadBitmap(&aau8EngenuicsLogoBlack[0][0], &BoardTest_sTestLogoPixelBlock);
   \   00000024   0x....             LDR.N    R1,??DataTable5_3
   \   00000026   0x....             LDR.N    R0,??DataTable5_4
   \   00000028   0x.... 0x....      BL       LcdLoadBitmap
    279              }
    280            }
    281          
    282            /* BUTTON0 toggles LEDs off and LCD pixel test on */
    283            if( WasButtonPressed(BUTTON0) )
   \                     ??BoardTestSM_Idle_0: (+1)
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       WasButtonPressed
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD060             BEQ.N    ??BoardTestSM_Idle_1
    284            {
    285              ButtonAcknowledge(BUTTON0);
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       ButtonAcknowledge
    286              
    287              /* If test is active, deactivate it, put all LEDs back on and move states to get an LCD Command in  */
    288              if(bButton0Test)
   \   0000003C   0x....             LDR.N    R0,??DataTable5_11
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD02E             BEQ.N    ??BoardTestSM_Idle_2
    289              {
    290                bButton0Test = FALSE;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable5_11
   \   00000048   0x7008             STRB     R0,[R1, #+0]
    291                LcdCommand(LCD_PIXEL_TEST_OFF);
   \   0000004A   0x20A4             MOVS     R0,#+164
   \   0000004C   0x.... 0x....      BL       LcdCommand
    292          
    293          #ifdef MPGL2_R01
    294                LedOn(BLUE);
    295                LedOn(GREEN);
    296                LedOn(RED);
    297                LedOn(YELLOW);
    298                
    299          #else
    300                LedOn(BLUE0);
   \   00000050   0x2008             MOVS     R0,#+8
   \   00000052   0x.... 0x....      BL       LedOn
    301                LedOn(BLUE1);
   \   00000056   0x2009             MOVS     R0,#+9
   \   00000058   0x.... 0x....      BL       LedOn
    302                LedOn(BLUE2);
   \   0000005C   0x200A             MOVS     R0,#+10
   \   0000005E   0x.... 0x....      BL       LedOn
    303                LedOn(BLUE3);
   \   00000062   0x200B             MOVS     R0,#+11
   \   00000064   0x.... 0x....      BL       LedOn
    304                LedOn(GREEN0);
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0x.... 0x....      BL       LedOn
    305                LedOn(GREEN1);
   \   0000006E   0x2005             MOVS     R0,#+5
   \   00000070   0x.... 0x....      BL       LedOn
    306                LedOn(GREEN2);
   \   00000074   0x2006             MOVS     R0,#+6
   \   00000076   0x.... 0x....      BL       LedOn
    307                LedOn(GREEN3);
   \   0000007A   0x2007             MOVS     R0,#+7
   \   0000007C   0x.... 0x....      BL       LedOn
    308                LedOn(RED0);
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x.... 0x....      BL       LedOn
    309                LedOn(RED1);
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      BL       LedOn
    310                LedOn(RED2);
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0x.... 0x....      BL       LedOn
    311                LedOn(RED3);
   \   00000092   0x2003             MOVS     R0,#+3
   \   00000094   0x.... 0x....      BL       LedOn
    312          #endif /* MPGL2_R01 */
    313                
    314                BoardTest_pfnStateMachine = BoardTestSM_WaitPixelTestOff;
   \   00000098   0x.... 0x....      ADR.W    R0,BoardTestSM_WaitPixelTestOff
   \   0000009C   0x....             LDR.N    R1,??DataTable5_8
   \   0000009E   0x6008             STR      R0,[R1, #+0]
   \   000000A0   0xE02A             B.N      ??BoardTestSM_Idle_1
    315              }
    316              /* Else activate it: turn all LEDs off and move states to get an LCD Command in */
    317              else
    318              {
    319                bButton0Test = TRUE;
   \                     ??BoardTestSM_Idle_2: (+1)
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x....             LDR.N    R1,??DataTable5_11
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
    320          
    321          #ifdef MPGL2_R01
    322                LedOff(BLUE);
    323                LedOff(GREEN);
    324                LedOff(RED);
    325                LedOff(YELLOW);
    326           #else
    327                LedOff(BLUE0);
   \   000000A8   0x2008             MOVS     R0,#+8
   \   000000AA   0x.... 0x....      BL       LedOff
    328                LedOff(BLUE1);
   \   000000AE   0x2009             MOVS     R0,#+9
   \   000000B0   0x.... 0x....      BL       LedOff
    329                LedOff(BLUE2);
   \   000000B4   0x200A             MOVS     R0,#+10
   \   000000B6   0x.... 0x....      BL       LedOff
    330                LedOff(BLUE3);
   \   000000BA   0x200B             MOVS     R0,#+11
   \   000000BC   0x.... 0x....      BL       LedOff
    331                LedOff(GREEN0);
   \   000000C0   0x2004             MOVS     R0,#+4
   \   000000C2   0x.... 0x....      BL       LedOff
    332                LedOff(GREEN1);
   \   000000C6   0x2005             MOVS     R0,#+5
   \   000000C8   0x.... 0x....      BL       LedOff
    333                LedOff(GREEN2);
   \   000000CC   0x2006             MOVS     R0,#+6
   \   000000CE   0x.... 0x....      BL       LedOff
    334                LedOff(GREEN3);
   \   000000D2   0x2007             MOVS     R0,#+7
   \   000000D4   0x.... 0x....      BL       LedOff
    335                LedOff(RED0);
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x.... 0x....      BL       LedOff
    336                LedOff(RED1);
   \   000000DE   0x2001             MOVS     R0,#+1
   \   000000E0   0x.... 0x....      BL       LedOff
    337                LedOff(RED2);
   \   000000E4   0x2002             MOVS     R0,#+2
   \   000000E6   0x.... 0x....      BL       LedOff
    338                LedOff(RED3);
   \   000000EA   0x2003             MOVS     R0,#+3
   \   000000EC   0x.... 0x....      BL       LedOff
    339          #endif /* MPGL2_R01 */
    340                
    341                BoardTest_pfnStateMachine = BoardTestSM_WaitPixelTestOn;
   \   000000F0   0x.... 0x....      ADR.W    R0,BoardTestSM_WaitPixelTestOn
   \   000000F4   0x....             LDR.N    R1,??DataTable5_8
   \   000000F6   0x6008             STR      R0,[R1, #+0]
    342              }
    343            } /* End of BUTTON 0 test */
    344          
    345          /* BUTTON1 toggles the radio and buzzer test.  When the button is pressed,
    346            an open channel request is made.  The system monitors _ANT_FLAGS_CHANNEL_OPEN
    347            to control wether or not the buzzer is on. */
    348            
    349            /* Toggle the beeper and ANT radio on BUTTON1 */
    350            if( WasButtonPressed(BUTTON1) )
   \                     ??BoardTestSM_Idle_1: (+1)
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0x.... 0x....      BL       WasButtonPressed
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD00F             BEQ.N    ??BoardTestSM_Idle_3
    351            {
    352              /* If channel is currently open, then queue to close it */
    353              if(AntRadioStatus() == ANT_OPEN )
   \   00000102   0x.... 0x....      BL       AntRadioStatus
   \   00000106   0x2802             CMP      R0,#+2
   \   00000108   0xD102             BNE.N    ??BoardTestSM_Idle_4
    354              {
    355                AntCloseChannel();
   \   0000010A   0x.... 0x....      BL       AntCloseChannel
   \   0000010E   0xE005             B.N      ??BoardTestSM_Idle_5
    356              }
    357              /* Otherwise, request to open the ANT channel */
    358              else if (AntRadioStatus() == ANT_CLOSED)
   \                     ??BoardTestSM_Idle_4: (+1)
   \   00000110   0x.... 0x....      BL       AntRadioStatus
   \   00000114   0x2803             CMP      R0,#+3
   \   00000116   0xD101             BNE.N    ??BoardTestSM_Idle_5
    359              {
    360                AntOpenChannel();
   \   00000118   0x.... 0x....      BL       AntOpenChannel
    361              }
    362              
    363              ButtonAcknowledge(BUTTON1);
   \                     ??BoardTestSM_Idle_5: (+1)
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0x.... 0x....      BL       ButtonAcknowledge
    364            }
    365          
    366            /* Monitor the CHANNEL_OPEN flag to decide whether or not audio should be on */
    367            if( (AntRadioStatus() == ANT_OPEN ) && !(BoardTest_u32Flags & _AUDIO_ANT_ON) )
   \                     ??BoardTestSM_Idle_3: (+1)
   \   00000122   0x.... 0x....      BL       AntRadioStatus
   \   00000126   0x2802             CMP      R0,#+2
   \   00000128   0xD109             BNE.N    ??BoardTestSM_Idle_6
   \   0000012A   0x....             LDR.N    R0,??DataTable5_1
   \   0000012C   0x7800             LDRB     R0,[R0, #+0]
   \   0000012E   0x0700             LSLS     R0,R0,#+28
   \   00000130   0xD405             BMI.N    ??BoardTestSM_Idle_6
    368            {
    369              //PWMAudioOn(BUZZER0);
    370              BoardTest_u32Flags |= _AUDIO_ANT_ON;
   \   00000132   0x....             LDR.N    R0,??DataTable5_1
   \   00000134   0x6800             LDR      R0,[R0, #+0]
   \   00000136   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000013A   0x....             LDR.N    R1,??DataTable5_1
   \   0000013C   0x6008             STR      R0,[R1, #+0]
    371            }
    372            
    373            if( AntRadioStatus() == ANT_CLOSED )
   \                     ??BoardTestSM_Idle_6: (+1)
   \   0000013E   0x.... 0x....      BL       AntRadioStatus
   \   00000142   0x2803             CMP      R0,#+3
   \   00000144   0xD108             BNE.N    ??BoardTestSM_Idle_7
    374            {
    375              PWMAudioOff(BUZZER0);
   \   00000146   0x2001             MOVS     R0,#+1
   \   00000148   0x.... 0x....      BL       PWMAudioOff
    376              BoardTest_u32Flags &= ~_AUDIO_ANT_ON;
   \   0000014C   0x....             LDR.N    R0,??DataTable5_1
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0xF030 0x0008      BICS     R0,R0,#0x8
   \   00000154   0x....             LDR.N    R1,??DataTable5_1
   \   00000156   0x6008             STR      R0,[R1, #+0]
    377            }
    378          
    379            /* Process ANT Application messages */  
    380                  
    381            if( AntReadData() )
   \                     ??BoardTestSM_Idle_7: (+1)
   \   00000158   0x.... 0x....      BL       AntReadData
   \   0000015C   0x2800             CMP      R0,#+0
   \   0000015E   0xD05E             BEQ.N    ??BoardTestSM_Idle_8
    382            {
    383              /* New data message: check what it is */
    384              if(G_eAntApiCurrentMessageClass == ANT_DATA)
   \   00000160   0x....             LDR.N    R0,??DataTable5_12
   \   00000162   0x7800             LDRB     R0,[R0, #+0]
   \   00000164   0x2801             CMP      R0,#+1
   \   00000166   0xD13C             BNE.N    ??BoardTestSM_Idle_9
    385              {
    386                /* We got some data: print it */
    387                for(u8 i = 0; i < ANT_DATA_BYTES; i++)
   \   00000168   0x2400             MOVS     R4,#+0
   \                     ??BoardTestSM_Idle_10: (+1)
   \   0000016A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000016C   0x2C08             CMP      R4,#+8
   \   0000016E   0xDA28             BGE.N    ??BoardTestSM_Idle_11
    388                {
    389                  au8DataContent[3 * i]     = HexToASCIICharUpper(G_au8AntApiCurrentData[i] / 16);
   \   00000170   0x....             LDR.N    R0,??DataTable5_13
   \   00000172   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000174   0x5C20             LDRB     R0,[R4, R0]
   \   00000176   0x2110             MOVS     R1,#+16
   \   00000178   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000017C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000017E   0x.... 0x....      BL       HexToASCIICharUpper
   \   00000182   0xA900             ADD      R1,SP,#+0
   \   00000184   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000186   0x2203             MOVS     R2,#+3
   \   00000188   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   0000018C   0x7008             STRB     R0,[R1, #+0]
    390                  au8DataContent[3 * i + 1] = HexToASCIICharUpper(G_au8AntApiCurrentData[i] % 16);
   \   0000018E   0x....             LDR.N    R0,??DataTable5_13
   \   00000190   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000192   0x5C21             LDRB     R1,[R4, R0]
   \   00000194   0x2210             MOVS     R2,#+16
   \   00000196   0xFB91 0xF0F2      SDIV     R0,R1,R2
   \   0000019A   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   0000019E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A0   0x.... 0x....      BL       HexToASCIICharUpper
   \   000001A4   0xA900             ADD      R1,SP,#+0
   \   000001A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001A8   0x2203             MOVS     R2,#+3
   \   000001AA   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   000001AE   0x7048             STRB     R0,[R1, #+1]
    391                  au8DataContent[3 * i + 2] = '-';
   \   000001B0   0x202D             MOVS     R0,#+45
   \   000001B2   0xA900             ADD      R1,SP,#+0
   \   000001B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001B6   0x2203             MOVS     R2,#+3
   \   000001B8   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   000001BC   0x7088             STRB     R0,[R1, #+2]
    392                }
   \   000001BE   0x1C64             ADDS     R4,R4,#+1
   \   000001C0   0xE7D3             B.N      ??BoardTestSM_Idle_10
    393                au8DataContent[23] = '\n';
   \                     ??BoardTestSM_Idle_11: (+1)
   \   000001C2   0x200A             MOVS     R0,#+10
   \   000001C4   0xF88D 0x0017      STRB     R0,[SP, #+23]
    394                au8DataContent[24] = '\r';
   \   000001C8   0x200D             MOVS     R0,#+13
   \   000001CA   0xF88D 0x0018      STRB     R0,[SP, #+24]
    395                au8DataContent[25] = '\0';
   \   000001CE   0x2000             MOVS     R0,#+0
   \   000001D0   0xF88D 0x0019      STRB     R0,[SP, #+25]
    396                
    397                DebugPrintf(au8DataMessage);
   \   000001D4   0x....             LDR.N    R0,??DataTable5_14
   \   000001D6   0x.... 0x....      BL       DebugPrintf
    398                DebugPrintf(au8DataContent);
   \   000001DA   0xA800             ADD      R0,SP,#+0
   \   000001DC   0x.... 0x....      BL       DebugPrintf
   \   000001E0   0xE01D             B.N      ??BoardTestSM_Idle_8
    399              }
    400              else if(G_eAntApiCurrentMessageClass == ANT_TICK)
   \                     ??BoardTestSM_Idle_9: (+1)
   \   000001E2   0x....             LDR.N    R0,??DataTable5_12
   \   000001E4   0x7800             LDRB     R0,[R0, #+0]
   \   000001E6   0x2802             CMP      R0,#+2
   \   000001E8   0xD119             BNE.N    ??BoardTestSM_Idle_8
    401              {
    402                /* Update and queue the new message data */
    403                au8TestMessage[7]++;
   \   000001EA   0x....             LDR.N    R0,??DataTable5_15
   \   000001EC   0x79C0             LDRB     R0,[R0, #+7]
   \   000001EE   0x1C40             ADDS     R0,R0,#+1
   \   000001F0   0x....             LDR.N    R1,??DataTable5_15
   \   000001F2   0x71C8             STRB     R0,[R1, #+7]
    404                if(au8TestMessage[7] == 0)
   \   000001F4   0x....             LDR.N    R0,??DataTable5_15
   \   000001F6   0x79C0             LDRB     R0,[R0, #+7]
   \   000001F8   0x2800             CMP      R0,#+0
   \   000001FA   0xD10D             BNE.N    ??BoardTestSM_Idle_12
    405                {
    406                  au8TestMessage[6]++;
   \   000001FC   0x....             LDR.N    R0,??DataTable5_15
   \   000001FE   0x7980             LDRB     R0,[R0, #+6]
   \   00000200   0x1C40             ADDS     R0,R0,#+1
   \   00000202   0x....             LDR.N    R1,??DataTable5_15
   \   00000204   0x7188             STRB     R0,[R1, #+6]
    407                  if(au8TestMessage[6] == 0)
   \   00000206   0x....             LDR.N    R0,??DataTable5_15
   \   00000208   0x7980             LDRB     R0,[R0, #+6]
   \   0000020A   0x2800             CMP      R0,#+0
   \   0000020C   0xD104             BNE.N    ??BoardTestSM_Idle_12
    408                  {
    409                    au8TestMessage[5]++;
   \   0000020E   0x....             LDR.N    R0,??DataTable5_15
   \   00000210   0x7940             LDRB     R0,[R0, #+5]
   \   00000212   0x1C40             ADDS     R0,R0,#+1
   \   00000214   0x....             LDR.N    R1,??DataTable5_15
   \   00000216   0x7148             STRB     R0,[R1, #+5]
    410                  }
    411                }
    412                AntQueueBroadcastMessage(au8TestMessage);
   \                     ??BoardTestSM_Idle_12: (+1)
   \   00000218   0x....             LDR.N    R0,??DataTable5_15
   \   0000021A   0x.... 0x....      BL       AntQueueBroadcastMessage
    413              }
    414            }
    415            
    416          } /* end BoardTestSM_Idle() */
   \                     ??BoardTestSM_Idle_8: (+1)
   \   0000021E   0xB008             ADD      SP,SP,#+32
   \   00000220   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??bButton0Test:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??u32LogoUpdateTimer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??au8TestMessage:
   \   00000000                      DS8 8

   \                                 In section .data, align 4
   \                     ??au8DataMessage:
   \   00000000   0x41 0x4E          DC8 "ANT data: "
   \              0x54 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0
    417          
    418          
    419          /*-------------------------------------------------------------------------------------------------------------------*/
    420          /* State to wait for successful pixel test on response */

   \                                 In section .text, align 4, keep-with-next
    421          static void BoardTestSM_WaitPixelTestOn(void)          
    422          {
   \                     BoardTestSM_WaitPixelTestOn: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    423            if(LcdCommand(LCD_PIXEL_TEST_ON))
   \   00000002   0x20A5             MOVS     R0,#+165
   \   00000004   0x.... 0x....      BL       LcdCommand
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ.N    ??BoardTestSM_WaitPixelTestOn_0
    424            {
    425              BoardTest_pfnStateMachine = BoardTestSM_Idle;
   \   0000000C   0x....             LDR.N    R0,??DataTable5_16
   \   0000000E   0x....             LDR.N    R1,??DataTable5_8
   \   00000010   0x6008             STR      R0,[R1, #+0]
    426            }
    427              
    428          } /* end BoardTestSM_WaitPixelTestOn() */
   \                     ??BoardTestSM_WaitPixelTestOn_0: (+1)
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    429               
    430          
    431          /*-------------------------------------------------------------------------------------------------------------------*/
    432          /* State to wait for successful pixel test on response */

   \                                 In section .text, align 4, keep-with-next
    433          static void BoardTestSM_WaitPixelTestOff(void)          
    434          {
   \                     BoardTestSM_WaitPixelTestOff: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    435            if(LcdCommand(LCD_PIXEL_TEST_OFF))
   \   00000002   0x20A4             MOVS     R0,#+164
   \   00000004   0x.... 0x....      BL       LcdCommand
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ.N    ??BoardTestSM_WaitPixelTestOff_0
    436            {
    437              BoardTest_pfnStateMachine = BoardTestSM_Idle;
   \   0000000C   0x....             LDR.N    R0,??DataTable5_16
   \   0000000E   0x....             LDR.N    R1,??DataTable5_8
   \   00000010   0x6008             STR      R0,[R1, #+0]
    438            }
    439              
    440          } /* end BoardTestSM_WaitPixelTestOf() */
   \                     ??BoardTestSM_WaitPixelTestOff_0: (+1)
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     BoardTest_u32Flags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     G_sLcdClearWholeScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     BoardTest_sTestLogoPixelBlock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     aau8EngenuicsLogoBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     G_stAntSetupData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     G_u32ApplicationFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     G_au8MessageOK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     BoardTest_pfnStateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     ??u32LogoUpdateTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     ??bButton0Test

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     G_eAntApiCurrentMessageClass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     G_au8AntApiCurrentData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     ??au8DataMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     ??au8TestMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     BoardTestSM_Idle

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x42 0x6F          DC8 "BoardTest task initialization "
   \              0x61 0x72    
   \              0x64 0x54    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x74 0x61    
   \              0x73 0x6B    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x00         
   \   0000001F   0x00               DC8 0
    441          
    442          
    443          #if 0 /* Don't need this just yet... */
    444          /*--------------------------------------------------------------------------------------------------------------------*/
    445          /* Handle an error */
    446          static void BoardTestSM_Error(void)          
    447          {
    448            
    449          } /* end BoardTestSM_Error() */
    450          #endif
    451          
    452          /*-------------------------------------------------------------------------------------------------------------------*/
    453          /* State to sit in if init failed */
    454          static void BoardTestSM_FailedInit(void)          
    455          {
    456              
    457          } /* end BoardTestSM_FailedInit() */
    458               
    459          
    460          /*--------------------------------------------------------------------------------------------------------------------*/
    461          /* End of File                                                                                                        */
    462          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   BoardTestInitialize
        40   -> AntChannelConfig
        40   -> CapTouchOn
        40   -> DebugPrintf
        40   -> LcdClearPixels
        40   -> LcdLoadBitmap
        40   -> LedOn
        40   -> PWMAudioOff
        40   -> PWMAudioSetFrequency
        40   -> __aeabi_memcpy
       8   BoardTestRunActiveState
         8   -- Indirect call
      40   BoardTestSM_Idle
        40   -> AntCloseChannel
        40   -> AntOpenChannel
        40   -> AntQueueBroadcastMessage
        40   -> AntRadioStatus
        40   -> AntReadData
        40   -> BoardTestUpdateLogoPosition
        40   -> ButtonAcknowledge
        40   -> DebugPrintf
        40   -> HexToASCIICharUpper
        40   -> IsTimeUp
        40   -> LcdClearScreen
        40   -> LcdCommand
        40   -> LcdLoadBitmap
        40   -> LedOff
        40   -> LedOn
        40   -> PWMAudioOff
        40   -> WasButtonPressed
       8   BoardTestSM_WaitPixelTestOff
         8   -> LcdCommand
       8   BoardTestSM_WaitPixelTestOn
         8   -> LcdCommand
      16   BoardTestUpdateLogoPosition
        16   -> CaptouchCurrentHSlidePosition
        16   -> CaptouchCurrentVSlidePosition


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      32  ?_0
     282  BoardTestInitialize
      10  BoardTestRunActiveState
     546  BoardTestSM_Idle
      20  BoardTestSM_WaitPixelTestOff
      20  BoardTestSM_WaitPixelTestOn
     114  BoardTestUpdateLogoPosition
       4  BoardTest_pfnStateMachine
       8  BoardTest_sTestLogoPixelBlock
       4  BoardTest_u32Flags
       4  G_u32BoardTestFlags
      12  au8DataMessage
       8  au8TestMessage
       1  bButton0Test
       4  u32LogoUpdateTimer

 
    33 bytes in section .bss
    12 bytes in section .data
    32 bytes in section .rodata
 1 060 bytes in section .text
 
 1 060 bytes of CODE  memory
    32 bytes of CONST memory
    45 bytes of DATA  memory

Errors: none
Warnings: none
